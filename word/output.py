import click


def printer(fn):
    """A decorator function that outputs default data around the response."""
    def wrapper(*args, **kwargs):
        word = args[0]['results'][0]['word']
        provider = args[0]['metadata']['provider']
        click.echo(f"\n\"{word}\"\n")
        fn(*args, **kwargs)
        click.echo(f"\nResults generated by {provider}")
        click.echo(f"{'='* 44}\n")

    return wrapper


def item_generator(json_input, lookup_key):
    """A recursive json generator."""
    if isinstance(json_input, dict):
        for k, v in json_input.items():
            if k == lookup_key:
                yield v
            else:
                yield from item_generator(v, lookup_key)
    elif isinstance(json_input, list):
        for item in json_input:
            yield from item_generator(item, lookup_key)


def thesaurus_generator(json_, key):
    """
    Called within the Word class and returns all thesaurus entries for the
    given key.
    """
    words = list()
    for item in item_generator(json_, key):
        for word in item:
            vals = word['text'].capitalize()
            words.append(vals)
    splits = " ; ".join(x for x in words)
    return splits


@printer
def thesaurus_printer(json_, lookup_key):
    """Prints out synonym, antonym or both based on user input."""
    try:
        if lookup_key == 'both':
            syn = thesaurus_generator(json_, 'synonyms')
            ant = thesaurus_generator(json_, 'antonyms')
            if len(syn) > 0:
                click.echo(f"\nSynonyms:\n")
                click.echo(f"{syn}")
            if len(ant) > 0:
                click.echo(f"\nAntonyms:\n")
                click.echo(f"{ant}")
        else:
            t = thesaurus_generator(json_, lookup_key)
            if len(t) > 0:
                click.echo(f"\n{lookup_key.capitalize()}:\n")
                click.echo(f"{t}\n")
    except KeyError:
        pass


@printer
def definition(json_, lookup_key):
    """Output the word definition."""
    try:
        words = item_generator(json_, lookup_key)
        for word in words:
            click.echo(f"[*] {word[0].capitalize()}")
        etymology(json_)

    except KeyError:
        pass


def etymology(json_):
    """Returns the origin of the given word."""
    list_of_origins = []
    try:
        etymologies = item_generator(json_, 'etymologies')
        num = 1
        for etymol in etymologies:
            list_of_origins.append(etymol)
        if len(list_of_origins) >= 1:
            click.echo('\nOrigin\'s')
            for origin in list_of_origins:
                click.echo(f"{num}. {origin[0]}")
                num += 1
    except KeyError:
        pass
